#include<stdio.h>
#include<conio.h>
#include<malloc.h>
#include<process.h>
struct node
{
  int info;
  struct node *link;
};
typedef struct node *NODE;
NODE getnode()
{
NODE x;
x=(NODE)malloc(sizeof(struct node));
if(x==NULL)
 {
  printf("mem full\n");
  exit(0);
 }
 return x;
} 


NODE insert(NODE first,int item)
{
NODE temp,cur;
temp=getnode();
temp->info=item;
temp->link=NULL;
if(first==NULL)
 return temp;
cur=first;
while(cur->link!=NULL)
 cur=cur->link;
cur->link=temp;
return first;
}

NODE delete_front(NODE first)
{
	NODE temp;
	if(first==NULL)
	{
		printf("list is empty \n");
		return first;
	}
	temp=first;
	temp=temp->link;
	printf("deleted item at front = %d ",first->info);
	free(first);
	return temp;
}
NODE delete_rear(NODE first)
{
	NODE cur,prev;
	if(first==NULL)
	{
		printf("list is empty \n");
		return first;
	}
	if(first->link==NULL)
	{
		printf("only one item in list and delete item  = %d ",first->info);
	    free(first);
		return NULL;
	}
	prev=NULL;
	cur=first;
	while(cur->link!=NULL)
	{
		prev=cur;
		cur=cur->link;
	}
	printf("deleted item at rear = %d ",cur->info);
	free(cur);
	prev->link=NULL;
	return first;
}

NODE delete_pos(int pos,NODE first)
{
	NODE cur,prev;
	int count;
	if(first==NULL)
	{
		printf("list is empty \n");
		return first;
	}
	if(pos<=0)
    {
		printf("invalid pos value \n");
		return first;
	}
	if(pos==1)
	{
		cur=first;
		first=first->link;
		printf("deleted item at position %d  = %d ",pos,cur->info);	
		free(cur);
		return first;
	}
	prev=NULL;
	cur=first;
	count=1;
	while(cur->link!=NULL)
	{
		if(count==pos)
			break;
		prev=cur;
		cur=cur->link;
		count++;
	}
	if(count!=pos)
	{
		printf("invalid pos value \n");
		return first;
	}
	prev->link=cur->link;
	printf("deleted item at position %d = %d ",pos,cur->info);
	free(cur);
	return first;
}

void display(NODE first)
{
 NODE temp;
 if(first==NULL)
 printf("list empty cannot display items\n");
 for(temp=first;temp!=NULL;temp=temp->link)
  {
  printf("%d\n",temp->info);
  }
}
void main()
{
int item,choice,pos;
NODE first=NULL;

for(;;)
{
printf("\n 1:Insert at rear\n 2:Delete at front\n 3:Delete at rear\n 4:Delete item at a position\n 5:display the linked list \n 6:Exit\n");
printf("enter the choice\n");
scanf("%d",&choice);
switch(choice)
 {
  case 1:printf("enter the item \n");
	 scanf("%d",&item);
	 first=insert(first,item);
	 break;
  
  case 2:
	 first=delete_front(first);
	 break;
  case 3: first=delete_rear(first);
  break;
  
  case 4:printf("enter the position\n");
		 scanf("%d",&pos);
		 first=delete_pos(pos,first);
		 break;
  case 5:display(first);
	 break;
 default:exit(0);
	
 }
}
getch();
}	
